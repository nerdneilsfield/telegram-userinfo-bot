name: Build and Push Docker Image on Tag

# Trigger this workflow only when a Git tag starting with 'v' is pushed
on:
  push:
    tags:
      - 'v*' # Matches tags like v1.0, v1.2.3, etc.

# Define environment variables for easier management of image names
env:
  # Replace with your Docker Hub username and repository name
  DOCKERHUB_IMAGE_NAME: nerdneils/telegram-userinfo-bot
  # Dynamically constructs the GHCR image path: ghcr.io/github_owner/github_repo_name
  GHCR_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    # Define permissions required by the job
    permissions:
      contents: read    # Needed to check out the repository code
      packages: write   # Needed to push Docker images to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Optional: Fetch all history and tags if needed by metadata action (usually not required for basic tag matching)
        # with:
        #   fetch-depth: 0

      - name: Set up Docker Buildx
        # Sets up Docker buildx for advanced features like multi-platform builds (optional here but good practice)
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Log in to Docker Hub
        # Logs in to Docker Hub using secrets stored in the repository settings
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use a Docker Hub Access Token here

      - name: Log in to GitHub Container Registry (GHCR)
        # Logs in to GHCR using the automatically generated GITHUB_TOKEN
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # Your GitHub username or organization name
          password: ${{ secrets.GITHUB_TOKEN }} # Built-in token, requires 'packages: write' permission

      - name: Extract metadata (tags, labels) for Docker
        # Automatically determines appropriate Docker tags and labels based on the Git event
        id: meta
        uses: docker/metadata-action@v5
        with:
          # List of Docker image names to generate metadata for
          images: |
            ${{ env.DOCKERHUB_IMAGE_NAME }}
            ${{ env.GHCR_IMAGE_NAME }}
          # Define tagging strategy based on the Git tag event
          tags: |
            # type=semver extracts the version number from the Git tag (e.g., v1.2.3 -> 1.2.3)
            type=semver,pattern={{version}}
            # type=semver extracts the version number plus major/minor (e.g., v1.2.3 -> 1.2, 1)
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Optional: Add 'latest' tag if the pushed tag matches a specific pattern (e.g., your main release tags)
            # type=raw,value=latest,enable=${{ endsWith(github.ref, 'rc') == false }} # Example: tag as latest if not a release candidate

      - name: Build and push Docker image
        # Builds the Docker image using the Dockerfile and pushes it to the configured registries
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          file: ./Dockerfile # Path to your Dockerfile
          push: true # Actually push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata step
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata step
          # Optional: Enable build cache for faster builds (using GitHub Actions cache)
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Optional: Specify platforms for multi-arch builds
          platforms: linux/amd64,linux/arm64